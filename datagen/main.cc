/* COPYRIGHT (C) 2018 Julian Offenhäuser
 *
 * Convert .rocket to binary and generate
 * a C++ header
 */

#include <iostream>
#include <string>
#include <vector>
#include <fstream>

#include "tinyxml2.h"


using namespace tinyxml2;


static std::string bin_name;
namespace HEADER
{
	static int NUM_EVENTS = 0;
	static int NUM_TRACKS = 0;
	static int NUM_TIME_OFFSETS = 0;
}

void Error(std::string err)
{
	std::cerr << err << "\n";
	exit(1);
}

typedef struct Track
{
	std::string name;
	int muteKeyCount = 0;
};

std::string GenerateHeader()
{
	using namespace HEADER;

	std::string str;

	// Pragma guard
	str += "#pragma once\n\n";
	// Disclaimer
	str += "/* Generated by " + bin_name + " */\n\n\n";
	// Namespace start
	str += "namespace SYNC_DATA\n{\n";
	// Constants
	str += "	static const int NUM_EVENTS = " + std::to_string(NUM_EVENTS) + ";\n";
	str += "	static const int NUM_TRACKS = " + std::to_string(NUM_TRACKS) + ";\n";
	str += "	static const int NUM_TIME_OFFSETS = " + std::to_string(NUM_TIME_OFFSETS) + ";\n";
	// Namespace end
	str += "}\n";

	return str;
}

uint32_t CalcTimeOffsets()
{
	return 0;
}

int main(int argc, char** argv)
{
	if (argc < 4)
		Error("Too few arguments");

	bin_name = argv[0];

	std::string in(argv[1]);
	std::string out(argv[2]);
	std::string header(argv[3]);

	XMLDocument doc;
	if(doc.LoadFile(in.c_str()) != XML_SUCCESS) Error("Unable to load file: " + in);

	XMLNode* pXml = doc.FirstChild();
	XMLElement* pRoot = doc.FirstChildElement();

	if (!pRoot) Error("No root element found");

	XMLElement* pTracks = pRoot->FirstChildElement();
	int rows = pTracks->IntAttribute("rows");
	int startRow = pTracks->IntAttribute("startRow");
	int endRow = pTracks->IntAttribute("endRow");
	int rowsPerBeat = pTracks->IntAttribute("rowsPerBeat");
	int beatsPerMin = pTracks->IntAttribute("beatsPerMin");

	std::vector<Track> tracks;
	XMLElement* pTrack = pTracks->FirstChildElement();

	// Set header data
	HEADER::NUM_TRACKS = tracks.size();
	HEADER::NUM_EVENTS = 0;
	HEADER::NUM_TIME_OFFSETS = CalcTimeOffsets();

	// Write C++ header file
	std::ofstream(header, std::ofstream::out) << GenerateHeader();

	std::cout << "\nSuccessfully written sync data to '" << out << "' and C++ header to '" << header << "'\n\n";

	return 0;
}